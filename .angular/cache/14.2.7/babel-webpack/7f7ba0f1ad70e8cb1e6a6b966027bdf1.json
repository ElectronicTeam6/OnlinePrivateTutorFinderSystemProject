{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/NIDUBEY/Desktop/Batch9 IDigital/Online Private Tutor Finder System/angular/OPTFS/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class UserService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.activeUser = {};\n    this.response = 0;\n    this.linkHeader = \"http://localhost:8089/\";\n    this.parnetHeader = \"parent/\";\n    this.tutorHeader = \"tutor/\";\n    this.adminHeader = \"admin/\";\n    this.booksHeader = \"books/\";\n  }\n\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.warn('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      // this.response = error.status;\n      console.warn(`Backend returned code ${error.status}, body was: `, error.error);\n      this.errorMessage = error.error;\n    } // Return an observable with a user-facing error message.\n\n\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n\n  getUserByEmail(email) {\n    return this.http.get(`${this.linkHeader}getUserByEmail/${email}`);\n  }\n\n  getAllUsers() {\n    // console.log(this.http.get(\"http://localhost:8089/allUsers\").subscribe((data)=> console.log(data)));\n    return this.http.get(`${this.linkHeader + this.parnetHeader}allParents`);\n  }\n\n  getAllParents() {\n    return this.http.get(`${this.linkHeader + this.parnetHeader}allParents`);\n  }\n\n  getAllTutors() {\n    return this.http.get(`${this.linkHeader + this.tutorHeader}allTutors`);\n  }\n\n  deleteUser(uId) {\n    return this.http.delete(`${this.linkHeader}deleteUser/${uId}`);\n  }\n\n  addUser(user) {\n    let message = this.http.post(`${this.linkHeader + this.parnetHeader}registerParent`, user).subscribe(); // setUser(user);\n\n    console.log(\"MESSAGE: \", message);\n  }\n\n  resp(status, email) {\n    if (status == 200) {\n      console.log(\"status is ok\", status);\n      console.log(this.activeUser); // sessionStorage.setItem();\n    }\n\n    console.log(\"Status in Resp:\", status);\n    this.http.get(`${this.linkHeader}getUserByEmail/${email}`, {\n      observe: 'response'\n    }).subscribe(data => {\n      this.activeUser = data.body; // console.log(data.body);\n\n      Object.entries(this.activeUser).forEach(([key, values]) => {\n        sessionStorage.setItem(key, values);\n      });\n\n      if (this.activeUser.admin) {\n        this.router.navigate(['/admin']);\n      } else if (this.activeUser.tutor) {\n        this.router.navigate(['/tutor']);\n      } else if (this.activeUser.parent) {\n        this.router.navigate(['/parent']);\n      }\n\n      console.warn(this.activeUser);\n    });\n  }\n\n  loginUser(email, password) {\n    let httpResponse = 0;\n    let credentials = [email, password]; // let tut = \"1\", par = \"2\", admin = \"3\";\n\n    /*#__PURE__*/\n    _asyncToGenerator(function* () {});\n\n    this.http.post(`${this.linkHeader + this.parnetHeader}loginParent`, credentials, {\n      responseType: 'text',\n      observe: 'response'\n    }).pipe(catchError(this.handleError)).subscribe(data => {\n      this.activeUser = data.body;\n      console.log(data.body, \"Active User: \", this.activeUser);\n    });\n    this.http.post(`${this.linkHeader + this.adminHeader}loginAdmin`, credentials, {\n      responseType: 'text',\n      observe: 'response'\n    }).pipe(catchError(this.handleError)).subscribe(data => {\n      this.activeUser = data.body;\n      console.log(data.body, \"Active User: \", this.activeUser);\n    });\n    console.log(\"++++++++++\", httpResponse);\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","throwError","UserService","constructor","http","router","handleError","error","status","console","warn","errorMessage","Error","getUserByEmail","email","get","linkHeader","getAllUsers","parnetHeader","getAllParents","getAllTutors","tutorHeader","deleteUser","uId","delete","addUser","user","message","post","subscribe","log","resp","activeUser","observe","data","body","Object","entries","forEach","key","values","sessionStorage","setItem","admin","navigate","tutor","parent","loginUser","password","httpResponse","credentials","responseType","pipe","adminHeader","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\NIDUBEY\\Desktop\\Batch9 IDigital\\Online Private Tutor Finder System\\angular\\OPTFS\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler, Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { async, catchError, throwError } from 'rxjs';\nimport { User } from '../architectures/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  activeUser: any = {\n  };\n\n  response = 0;\n  errorMessage: any;\n\n  linkHeader = \"http://localhost:8089/\";\n  parnetHeader = \"parent/\";\n  tutorHeader = \"tutor/\";\n  adminHeader = \"admin/\";\n  booksHeader = \"books/\";\n\n  users: any;\n\n  constructor(private http: HttpClient, private router: Router) {\n\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.warn('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      // this.response = error.status;\n\n\n      console.warn(\n        `Backend returned code ${error.status}, body was: `, error.error);\n      this.errorMessage = error.error;\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n\n  getUserByEmail(email: string) {\n    return this.http.get(`${this.linkHeader}getUserByEmail/${email}`);\n  }\n\n  getAllUsers() {\n    // console.log(this.http.get(\"http://localhost:8089/allUsers\").subscribe((data)=> console.log(data)));\n\n    return (this.http.get(`${this.linkHeader + this.parnetHeader}allParents`));\n  }\n\n  getAllParents() {\n    return (this.http.get(`${this.linkHeader + this.parnetHeader}allParents`));\n  }\n\n  getAllTutors() {\n    return this.http.get(`${this.linkHeader + this.tutorHeader}allTutors`);\n  }\n\n  deleteUser(uId: number) {\n    return this.http.delete(`${this.linkHeader}deleteUser/${uId}`);\n  }\n\n\n  addUser(user: User) {\n\n    let message = this.http.post(`${this.linkHeader + this.parnetHeader}registerParent`, user).subscribe();\n    // setUser(user);\n    console.log(\"MESSAGE: \", message);\n\n\n  }\n\n  resp(status: number, email: String) {\n\n    if (status == 200) {\n      console.log(\"status is ok\", status);\n\n      console.log(this.activeUser);\n\n\n      // sessionStorage.setItem();\n\n    }\n\n    console.log(\"Status in Resp:\", status);\n\n    this.http.get(`${this.linkHeader}getUserByEmail/${email}`, { observe: 'response' }).subscribe((data => {\n      this.activeUser = data.body;\n      // console.log(data.body);\n\n      Object.entries(this.activeUser).forEach(\n        ([key, values]) => {\n          sessionStorage.setItem(key, <string>values);\n        }\n      );\n\n      if (this.activeUser.admin) {\n        this.router.navigate(['/admin']);\n      }\n      else if (this.activeUser.tutor) {\n        this.router.navigate(['/tutor']);\n      }\n      else if (this.activeUser.parent) {\n        this.router.navigate(['/parent']);\n      }\n\n\n      console.warn(this.activeUser);\n    }\n    ));\n\n\n  }\n\n  loginUser(email: String, password: String) {\n    let httpResponse = 0;\n    let credentials = [email, password];\n\n    // let tut = \"1\", par = \"2\", admin = \"3\";\n    async () => {\n      \n    } \n    this.http.post(`${this.linkHeader + this.parnetHeader}loginParent`, credentials, { responseType: 'text', observe: 'response' }).pipe(catchError(this.handleError)).subscribe((data) => { this.activeUser = data.body; console.log(data.body, \"Active User: \", this.activeUser) });\n    this.http.post(`${this.linkHeader + this.adminHeader}loginAdmin`, credentials, { responseType: 'text', observe: 'response' }).pipe(catchError(this.handleError)).subscribe((data) => { this.activeUser = data.body; console.log(data.body, \"Active User: \", this.activeUser) });\n\n    \n\n    console.log(\"++++++++++\", httpResponse);\n\n\n\n  }\n\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}