{"ast":null,"code":"import { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.activeUser = {};\n    this.response = 0;\n    this.linkHeader = \"http://localhost:8089/\";\n  }\n\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      // this.response = error.status;\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    } // Return an observable with a user-facing error message.\n\n\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n\n  getUserByEmail(email) {\n    return this.http.get(`${this.linkHeader}getUserByEmail/${email}`);\n  }\n\n  getAllUsers() {\n    // console.log(this.http.get(\"http://localhost:8089/allUsers\").subscribe((data)=> console.log(data)));\n    return this.http.get(`${this.linkHeader}allUsers`);\n  }\n\n  getAllParents() {\n    return this.http.get(`${this.linkHeader}allParents`);\n  }\n\n  getAllTutors() {\n    return this.http.get(`${this.linkHeader}allTutors`);\n  }\n\n  deleteUser(uId) {\n    return this.http.delete(`${this.linkHeader}deleteUser/${uId}`);\n  }\n\n  addUser(user) {\n    let message = this.http.put(`${this.linkHeader}addUser`, user).subscribe(); // setUser(user);\n\n    console.log(\"MESSAGE: \", message);\n  }\n\n  resp(status, email) {\n    console.log(\"Status in Resp:\", status);\n    async;\n    this.http.get(`${this.linkHeader}getUserByEmail/${email}`, {\n      observe: 'response'\n    }).subscribe(data => {\n      this.activeUser = data;\n      console.warn(this.activeUser);\n    });\n    console.log(\"hello\", this.activeUser);\n  }\n\n  loginUser(email, password) {\n    let httpResponse = 0;\n    this.http.post(`${this.linkHeader}loginUser`, [email, password], {\n      responseType: 'text',\n      observe: 'response'\n    }).subscribe(data => this.resp(data.status, email));\n    console.log(\"++++++++++\", httpResponse);\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAArB,QAAuC,MAAvC;;;AAMA,OAAM,MAAOC,WAAP,CAAkB;EAWtBC,YAAoBC,IAApB,EAAoC;IAAhB;IATpB,kBAAkB,EAAlB;IAGA,gBAAW,CAAX;IAEA,kBAAa,wBAAb;EAMC;;EAEOC,WAAW,CAACC,KAAD,EAAyB;IAC1C,IAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;MACtB;MACAC,OAAO,CAACF,KAAR,CAAc,oBAAd,EAAoCA,KAAK,CAACA,KAA1C;IACD,CAHD,MAGO;MACL;MACA;MACA;MACAE,OAAO,CAACF,KAAR,CACE,yBAAyBA,KAAK,CAACC,MAAM,cADvC,EACuDD,KAAK,CAACA,KAD7D;IAED,CAVyC,CAW1C;;;IACA,OAAOL,UAAU,CAAC,MAAM,IAAIQ,KAAJ,CAAU,iDAAV,CAAP,CAAjB;EACD;;EAEDC,cAAc,CAACC,KAAD,EAAc;IAC1B,OAAO,KAAKP,IAAL,CAAUQ,GAAV,CAAc,GAAG,KAAKC,UAAU,kBAAkBF,KAAK,EAAvD,CAAP;EACD;;EAEDG,WAAW;IACT;IAEA,OAAQ,KAAKV,IAAL,CAAUQ,GAAV,CAAc,GAAG,KAAKC,UAAU,UAAhC,CAAR;EACD;;EAEDE,aAAa;IACX,OAAQ,KAAKX,IAAL,CAAUQ,GAAV,CAAc,GAAG,KAAKC,UAAU,YAAhC,CAAR;EACD;;EAEDG,YAAY;IACV,OAAO,KAAKZ,IAAL,CAAUQ,GAAV,CAAc,GAAG,KAAKC,UAAU,WAAhC,CAAP;EACD;;EAEDI,UAAU,CAACC,GAAD,EAAY;IACpB,OAAO,KAAKd,IAAL,CAAUe,MAAV,CAAiB,GAAG,KAAKN,UAAU,cAAcK,GAAG,EAApD,CAAP;EACD;;EAGDE,OAAO,CAACC,IAAD,EAAW;IAEhB,IAAIC,OAAO,GAAG,KAAKlB,IAAL,CAAUmB,GAAV,CAAc,GAAG,KAAKV,UAAU,SAAhC,EAA2CQ,IAA3C,EAAiDG,SAAjD,EAAd,CAFgB,CAGhB;;IACAhB,OAAO,CAACiB,GAAR,CAAY,WAAZ,EAAyBH,OAAzB;EAGD;;EAEDI,IAAI,CAACnB,MAAD,EAAiBI,KAAjB,EAA8B;IAEhCH,OAAO,CAACiB,GAAR,CAAY,iBAAZ,EAA+BlB,MAA/B;IAEAoB,KAAK;IAAC,KAAKvB,IAAL,CAAUQ,GAAV,CAAc,GAAG,KAAKC,UAAU,kBAAkBF,KAAK,EAAvD,EAA2D;MAAEiB,OAAO,EAAE;IAAX,CAA3D,EAAoFJ,SAApF,CAA+FK,IAAI,IAAG;MAC1G,KAAKC,UAAL,GAAkBD,IAAlB;MACArB,OAAO,CAACuB,IAAR,CAAa,KAAKD,UAAlB;IACD,CAHK;IAONtB,OAAO,CAACiB,GAAR,CAAY,OAAZ,EAAoB,KAAKK,UAAzB;EAGD;;EAEDE,SAAS,CAACrB,KAAD,EAAgBsB,QAAhB,EAAgC;IACvC,IAAIC,YAAY,GAAG,CAAnB;IACA,KAAK9B,IAAL,CAAU+B,IAAV,CAAe,GAAG,KAAKtB,UAAU,WAAjC,EAA8C,CAACF,KAAD,EAAQsB,QAAR,CAA9C,EAAiE;MAAEG,YAAY,EAAE,MAAhB;MAAwBR,OAAO,EAAE;IAAjC,CAAjE,EAAgHJ,SAAhH,CAA2HK,IAAD,IAAU,KAAKH,IAAL,CAAUG,IAAI,CAACtB,MAAf,EAAuBI,KAAvB,CAApI;IAEAH,OAAO,CAACiB,GAAR,CAAY,YAAZ,EAA0BS,YAA1B;EAID;;AAtFqB;;;mBAAXhC,aAAWmC;AAAA;;;SAAXnC;EAAWoC,SAAXpC,WAAW;EAAAqC,YAFV","names":["throwError","UserService","constructor","http","handleError","error","status","console","Error","getUserByEmail","email","get","linkHeader","getAllUsers","getAllParents","getAllTutors","deleteUser","uId","delete","addUser","user","message","put","subscribe","log","resp","async","observe","data","activeUser","warn","loginUser","password","httpResponse","post","responseType","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\NIDUBEY\\Desktop\\Batch9 IDigital\\Online Private Tutor Finder System\\angular\\OPTFS\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler, Injectable } from '@angular/core';\nimport { catchError, throwError } from 'rxjs';\nimport { User } from '../architectures/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  activeUser: any = {\n  };\n\n  response = 0;\n\n  linkHeader = \"http://localhost:8089/\";\n\n  users: any;\n\n  constructor(private http: HttpClient) {\n\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      // this.response = error.status;\n      console.error(\n        `Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n\n  getUserByEmail(email: string) {\n    return this.http.get(`${this.linkHeader}getUserByEmail/${email}`);\n  }\n\n  getAllUsers() {\n    // console.log(this.http.get(\"http://localhost:8089/allUsers\").subscribe((data)=> console.log(data)));\n\n    return (this.http.get(`${this.linkHeader}allUsers`));\n  }\n\n  getAllParents() {\n    return (this.http.get(`${this.linkHeader}allParents`));\n  }\n\n  getAllTutors() {\n    return this.http.get(`${this.linkHeader}allTutors`);\n  }\n\n  deleteUser(uId: number) {\n    return this.http.delete(`${this.linkHeader}deleteUser/${uId}`);\n  }\n\n\n  addUser(user: User) {\n\n    let message = this.http.put(`${this.linkHeader}addUser`, user).subscribe();\n    // setUser(user);\n    console.log(\"MESSAGE: \", message);\n\n\n  }\n\n  resp(status: number, email: String) {\n\n    console.log(\"Status in Resp:\", status);\n\n    async this.http.get(`${this.linkHeader}getUserByEmail/${email}`, { observe: 'response' }).subscribe((data => {\n      this.activeUser = data;\n      console.warn(this.activeUser);\n    }\n    ));\n\n\n    console.log(\"hello\",this.activeUser);\n\n\n  }\n\n  loginUser(email: String, password: String) {\n    let httpResponse = 0;\n    this.http.post(`${this.linkHeader}loginUser`, [email, password], { responseType: 'text', observe: 'response' }).subscribe((data) => this.resp(data.status, email));\n\n    console.log(\"++++++++++\", httpResponse);\n\n\n\n  }\n\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}